{"/home/travis/build/npmtest/node-npmtest-node-http-proxy/test.js":"/* istanbul instrument in package npmtest_node_http_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-http-proxy/lib.npmtest_node_http_proxy.js":"/* istanbul instrument in package npmtest_node_http_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_http_proxy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_http_proxy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-http-proxy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-http-proxy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_http_proxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_http_proxy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_http_proxy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_http_proxy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_http_proxy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_http_proxy.__dirname + '/lib.npmtest_node_http_proxy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-http-proxy/node_modules/node-http-proxy/index.js":"\nvar proxyMaster = require('./lib/proxy-master')\n\nmodule.exports = {\n    proxyMaster:proxyMaster\n}","/home/travis/build/npmtest/node-npmtest-node-http-proxy/node_modules/node-http-proxy/lib/proxy-master.js":"/**\r\n * master to manage proxy nodes\r\n * @type {exports}\r\n */\r\n\r\nvar pm = require('pm');\r\n\r\nfunction proxyMaster(options){\r\n    this._options = options || {};\r\n    this._app = pm.createMaster({\r\n        'pidfile' : '/tmp/node-proxy-server.pid'\r\n    })\r\n}\r\n\r\nproxyMaster.prototype.start = function(){\r\n    var options = this._options\r\n\r\n    this._app.register('proxy-server',__dirname + '/proxy-server.js', {\r\n        listen : options.port || 8234,\r\n        children: options.instance || 1\r\n    },process.argv)\r\n\r\n    this._app.on('giveup', function (name, num, pause) {\r\n        console.log('giveup', name, num, pause)\r\n    })\r\n\r\n    this._app.dispatch()\r\n}\r\n\r\nproxyMaster.prototype.stop = function(){\r\n\r\n}\r\n\r\nmodule.exports = proxyMaster\r\n","/home/travis/build/npmtest/node-npmtest-node-http-proxy/node_modules/node-http-proxy/lib/common.js":"/**\n * Created by wddqing on 15/2/3.\n */\n\n\nmodule.exports = {\n    'SERVER_ENV':{\n        'NAME':'node-http-proxy',\n        'VERSION':'0.2.3',\n        'PID':'/tmp/node-http-proxy.pid'\n    }\n}","/home/travis/build/npmtest/node-npmtest-node-http-proxy/node_modules/node-http-proxy/lib/proxy-server.js":"var http = require('http');\r\nvar Socket = require('net').Socket;\r\nvar url = require('url');\r\nvar dns = require('dns');\r\nvar request = require('request');\r\nvar qs = require('querystring');\r\nvar pm = require('pm');\r\nvar BufferHelper = require('bufferhelper');\r\n\r\n\r\n\r\n(function proxy(){\r\n\tthis.options = {};\r\n\tthis.proxyNode = new proxyNode(this.options);\r\n\t\r\n\r\n\tfunction proxyNode(options){\r\n\t\t//初始化Node服务器\r\n\t\tthis.httpProxy = new httpProxy(options);\r\n\t\tthis.httpsProxy = new httpsProxy(options);\r\n\t\tvar server = http.createServer(serverHandler);\r\n\t\tthis.httpProxy.init(server);\r\n\t\tthis.httpsProxy.init(server);\r\n\t}\r\n\r\n\tfunction serverHandler(req,res){\r\n\t\theaderProcessor(req.headers);\r\n\t\tvar options = {headers:req.headers,followRedirect:false,timeout:30000};\r\n\t\tswitch(req.method.toLowerCase()){\r\n\t\t\tcase 'post':\r\n\t\t\t\t\tvar bufferhelper = new BufferHelper();\r\n\t\t\t\t\tbufferhelper.load(req,function(err,body){\r\n\t\t\t\t\t\toptions.form = qs.parse(body);\r\n\t\t\t\t\t\trequest_handler('post',req,options,res);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase 'get':\r\n\t\t\t\t\trequest_handler('get',req,options,res);\r\n\t\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\t\tres.end('no support method');\r\n\t\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction request_handler(method,req,options,res){\r\n\t\tvar r = request[method](req.url,options);\r\n\t\tr.on('error',function(e){\r\n\t\t\tif(argv.log_error)\r\n\t\t\t\tconsole.trace(e);\r\n\t\t\tres.end();\r\n\t\t});\r\n\t\tr.pipe(res);\r\n\t}\r\n\r\n\r\n\tfunction headerProcessor(headers) {\r\n\r\n\t  \tfunction normalizeHeaderCase(header){\r\n\t\t  \tvar result = {\r\n\t\t\t    \"content-md5\": \"Content-MD5\",\r\n\t\t\t    \"dnt\": \"DNT\",\r\n\t\t\t    \"etag\": \"ETag\",\r\n\t\t\t    \"last-event-id\": \"Last-Event-ID\",\r\n\t\t\t    \"tcn\": \"TCN\",\r\n\t\t\t    \"te\": \"TE\",\r\n\t\t\t    \"www-authenticate\": \"WWW-Authenticate\",\r\n\t\t\t    \"x-dnsprefetch-control\": \"X-DNSPrefetch-Control\"\r\n\t\t  \t}[header.toLowerCase()];\r\n\t\t  \tif (result) {\r\n\t\t    \treturn result;\r\n\t\t  \t}\r\n\t\t  \treturn header\r\n\t\t    \t.split(\"-\")\r\n\t\t    \t.map(function (text) {\r\n\t\t      \t\treturn text.charAt(0).toUpperCase() + text.substr(1).toLowerCase();\r\n\t\t    \t})\r\n\t\t    \t.join(\"-\");\t\r\n\t  \t}\r\n\t  \tObject.keys(headers).forEach(function(h){\r\n\t  \t\tvar k = normalizeHeaderCase(h);\r\n\t  \t\tif(k != h){\r\n\t  \t\t\theaders[k] = headers[h];\r\n\t  \t\t\tdelete \theaders[h];\r\n\t  \t\t}\r\n\t  \t});\r\n\t}\r\n\r\n\tfunction httpProxy(options){\r\n\t\t//初始化http代理模块\r\n\t\tthis.init = function(server){\r\n\t\t\tpm.createWorker().ready(function (socket, port) {\r\n\t\t\t\tserver.emit('connection', socket);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tfunction httpsProxy(options){\r\n\t\t//初始化https代理模块\r\n\t\t\r\n\t\tfunction targetReceiver(hosts,ua){\r\n\t\t\tvar target = new Socket();//target socket\r\n\t\t\ttarget.setTimeout(10000,function(){\r\n\t\t\t\ttarget.destroy();\r\n\t\t\t});\r\n\t\t\tua.on('error',function(e){\r\n\t\t\t\tif(argv.log_error)\r\n\t\t\t\t\tconsole.trace(e);\r\n\t\t\t});\r\n\t\t\ttarget.on('error',function(e){\r\n\t\t\t\tif(argv.log_error)\r\n\t\t\t\t\tconsole.trace(e);\r\n\t\t\t});\r\n\t\t\ttarget.on('close',function(){\r\n\t\t\t\tua.destroy();\r\n\t\t\t});\r\n\t\t\tua.on('close',function(){\r\n\t\t\t\ttarget.destroy();\t\t\t\r\n\t\t\t});\r\n\r\n\t\t\ttarget.on('connect',function(){\r\n\t\t\t\tif(ua.write('HTTP/1.1 200 Connection Established\\r\\n\\r\\n')){\r\n\t\t\t\t\tua.pipe(target);\r\n\t\t\t\t\ttarget.pipe(ua);\r\n\t\t\t\t}else{\r\n\t\t\t\t\ttarget.destroy();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\ttarget.connect(hosts.port,hosts.host);\r\n\r\n\t\t}\r\n\t\tfunction connection_handler(req,ua,head){\r\n\t\t\tvar hosts = url.parse('https://'+req.headers.host);\r\n\t\t\tif(hosts == undefined || !hosts){//have not target host\r\n\t\t\t\treturn ua.end();\r\n\t\t\t}\r\n\r\n\t\t\thostToIP(hosts.hostname,function(err,address){\r\n\t\t\t\tif(address){\r\n\t\t\t\t\thosts.host = address;\r\n\t\t\t\t\ttargetReceiver(hosts,ua);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tua.end();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.init = function(server){\r\n\t\t\tserver.on('connect',connection_handler);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction hostToIP(host,cb){\r\n\t\tdns.lookup(host,cb);\r\n\t}\r\n})();\r\n\r\n\r\n\r\n"}